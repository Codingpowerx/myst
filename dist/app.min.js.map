{"version":3,"sources":["app.js"],"names":["path","require","express","rateLimit","mongoSanitize","morgan","hpp","AppError","helmet","tourRouter","reviewRouter","app","set","join","__dirname","userRouter","use","env","NODE_ENV","limiter","windowMs","message","limit","xss","whitelist","req","res","next","requestTime","Date","toISOString","get","render","globalErrorHandler","module","exports","all","concat","originalUrl"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,QACfC,QAAUD,QAAQ,WADlBD,OAAOC,QAAQ,UAGfE,UAAYF,QAAQ,sBAFpBC,OAAUD,QAAQ,UAIlBG,cAAgBH,QAAQ,0BAHxBI,IAAMJ,QAAU,aAKhBK,IAAML,QAAQ,OAEdM,SAAWN,QAAQ,oBALnBO,mBAAiBP,QAAvB,iCAOMQ,WAAaR,QAAQ,uBANrBG,WAAaH,QAAU,uBAQvBS,aAAeT,QAAQ,yBAEvBU,IAAMT,UAEZS,IAAIC,IAAI,cAAe,OARvBD,IAAMJ,IAAAA,QAAWN,KAAOY,KAACC,UAAA,UAGzBH,IAAMI,IAAAA,QAAU,OAAGd,KAAQY,KAAAC,UAAA,YAe3BH,IAAIK,IAAIR,UATmBM,gBAAvBF,QAAIK,IAARC,UAIAP,IAAAK,IAAAX,OAAA,QAaA,IAAMc,QAAUhB,UAAU,CAR1BQ,IAAA,IAUES,SAAU,KAPZC,QAAW,iEAEVV,IAEDK,IAAA,OAAAG,SACAR,IAAMQ,IAAAA,QAAUhB,KAAAA,CAASmB,MAAC,UAGxBD,IAAAA,IAAAA,iBAWFV,IAAIK,IAAIO,OANaZ,IASjBK,IACFV,IAAI,CAPFU,UAAIZ,CASF,WANFY,kBAQE,iBALFA,eAEAQ,aAWJ,YAKCb,IAEDK,IAAA,SAAAS,EAAAC,EAAAC,GALEF,EAAIG,aAAc,IAAIC,MAAOC,cAO7BJ,MAIDf,IALDoB,IAAA,IAAA,SAAAN,EAAAC,GAOAf,EAAIK,OAAI,KAAAgB,OAAiBvB,OAAAA,CACrBO,KAAI,mBACJA,KAAI,gBAMRL,IAAIK,IAAIiB,gBAAAA,YAERC,IAAAA,IAAOC,gBAAPpB,YARAJ,IAAIK,IAAI,kBAAmBN,cAE3BC,IAAIyB,IAAI,IAAK,SAACX,EAAKC,EAAKC,GACtBA,EAAK,IAAIpB,SAAJ,cAAA8B,OAA2BZ,EAAIa,YAA/B,oBAA8D,QAGrE3B,IAAIK,IAAIiB,oBAERC,OAAOC,QAAUxB","file":"app.min.js","sourcesContent":["const path = require('path');\r\nconst express = require('express');\r\nconst morgan = require('morgan');\r\nconst rateLimit = require('express-rate-limit');\r\nconst helmet = require('helmet');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst xss = require('xss-clean');\r\nconst hpp = require('hpp');\r\n\r\nconst AppError = require('./utils/appError');\r\nconst globalErrorHandler = require('./controllers/errorController');\r\nconst tourRouter = require('./routes/tourRoutes');\r\nconst userRouter = require('./routes/userRoutes');\r\nconst reviewRouter = require('./routes/reviewRoutes');\r\n\r\nconst app = express();\r\n\r\napp.set('view engine', 'pug');\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\n// 1) GLOBAL MIDDLEWARES\r\n\r\n// Serving static files\r\n//app.use(express.static(`${__dirname}/public`));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Set security HTTP headers\r\napp.use(helmet());\r\n\r\n// Development logging\r\nif (process.env.NODE_ENV === 'development') {\r\n  app.use(morgan('dev'));\r\n}\r\n\r\n// Limit requests from same API\r\nconst limiter = rateLimit({\r\n  max: 100,\r\n  windowMs: 60 * 60 * 1000,\r\n  message: 'Too many requests from this IP, please try again in an hour!'\r\n});\r\napp.use('/api', limiter);\r\n\r\n// Body parser, reading data from body into req.body\r\napp.use(express.json({ limit: '10kb' }));\r\n\r\n// Data sanitization against NoSQL query injection\r\napp.use(mongoSanitize());\r\n\r\n// Data sanitization against XSS\r\napp.use(xss());\r\n\r\n// Prevent parameter pollution\r\napp.use(\r\n  hpp({\r\n    whitelist: [\r\n      'duration',\r\n      'ratingsQuantity',\r\n      'ratingsAverage',\r\n      'maxGroupSize',\r\n      'difficulty',\r\n      'price'\r\n    ]\r\n  })\r\n);\r\n\r\n// Test middleware\r\napp.use((req, res, next) => {\r\n  req.requestTime = new Date().toISOString();\r\n  // console.log(req.headers);\r\n  next();\r\n});\r\n\r\n// 3) ROUTES\r\napp.get('/', (req, res) => {\r\n  res.status(200).render('base', {\r\n    tour: 'The Forest Hiker',\r\n    user: 'Godspower'\r\n  });\r\n});\r\n\r\napp.use('/api/v1/tours', tourRouter);\r\napp.use('/api/v1/users', userRouter);\r\napp.use('/api/v1/reviews', reviewRouter);\r\n\r\napp.all('*', (req, res, next) => {\r\n  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));\r\n});\r\n\r\napp.use(globalErrorHandler);\r\n\r\nmodule.exports = app;\r\n"]}